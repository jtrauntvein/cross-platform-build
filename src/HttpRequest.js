const Axios = require("Axios").default;
const Target = require("./Target");


/**
 * Implements the code that performs the HTTP request.
 */
async function do_http_request() {
   return new Promise((accept, reject) => {
      const method = this.method.toUpperCase();
      const axios_config = {
         headers: this.headers,
         params: this.query_params,
         ...this.other_axios_props
      };
      if(method === "POST")
      {
         let data = this.data;
         if(typeof this.data === "function")
            data = this.data.call(this, axios_config);
         Axios.post(this.endpoint, data, axios_config).then((response) => {
            let rtn = response;
            if(typeof this.response_handler === "function")
               rtn = this.response_handler.call(this, response);
            accept(rtn);
         }).catch((error) => {
            reject(error);
         });
      }
      else if(method === "GET")
      {
         Axios.get(this.endpoint, axios_config).then((response) => {
            let rtn = response;
            if(typeof this.response_handler === "function")
               rtn = this.response_handler.call(this, response);
            accept(rtn);
         }).catch((error) => {
            reject(error);
         });
      }
      else if(method === "PUT")
      {
         let data = this.data;
         if(typeof data === "function")
            data = data.call(this, axios_config);
         Axios.put(this.endpoint, data, axios_config).then((response) => {
            let rtn = response;
            if(typeof this.response_handler === "function")
               rtn = this.response_handler.call(this, response);
            accept(rtn);
         }).catch((error) => {
            reject(error);
         });
      }
      else
         reject(Error(`Unsupported HTTP method: ${this.method}`));
   });
}


/**
 * @typedef HttpRequestParamsType
 * @property {string} name Specifies the name of the target.
 * @property {string[]} depends Specifies the names of targets on which the generated target will depend.
 * @property {string} endpoint Specifies the URL for the web service to invoke.
 * @property {string="POST"} method Specifies the HTTP method for the request
 * @property {object={}} query_params Optionally specifies the query parameters that will be passed along with the endpoint.
 * @property {object={}} headers Optionally specifies the HTTP header fields that will be passed with the request.
 * @property {*?} data Optionally specifies the data that should be passed with the request.  This can be any of the 
 * types supported by the axios module but can also be specified as a function that would be
 * called before the request that would return the actual data to be sent.
 * @property {object=[]} other_axios_props Optionally specifies other properties that should be
 * passed to the axios request.
 * @property {function<object>?} response_handler Optionally specifies a function that will handle the response from the request.
 * @property {object={}} options Optionally specifies the options used when this target is generated within a sub-project.
 */
/**
 * Defines a target type that performs an HTTP request for GET, POST, PUT, and other 
 * HTTP methods.  
 * @param {HttpRequestParamsType} params Specifies the parameters
 * @returns {Target} Returns the target that is generated by calling this function.
 */
function http_request({
   name,
   depends,
   endpoint,
   method = "POST",
   query_params = {},
   headers = {},
   data = undefined,
   other_axios_props = {},
   response_handler = undefined,
   options = {}
}) {
   const rtn = Target.target({
      name,
      depends,
      action: do_http_request,
      options
   });
   rtn.method = method;
   rtn.endpoint = endpoint;
   rtn.query_params = query_params;
   rtn.headers = headers;
   rtn.data = data;
   rtn.other_axios_props = other_axios_props;
   rtn.response_handler = response_handler;
   return rtn;
}

module.exports = {
   http_request
}
